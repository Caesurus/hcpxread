package structs

import (
	"encoding/hex"
	"strconv"
	"strings"
)

var HcpxHeader = []byte{72, 67, 80, 88}

type Version []byte

func (ver Version) String() (version string) {
	for k, v := range ver {
		version += strconv.Itoa(int(v))
		if k < len(ver)-1 {
			version += "."
		}
	}
	return
}

type MessagePair uint8

func (m MessagePair) Meaning() string {
	if m >= 0 && m <= 5 {
		return "replay counter matching"
	}
	if m >= 128 && m <= 133 {
		return "replay counter was ignored"
	}
	return ""
}

type MAC []byte

func (m MAC) String() (s string) {
	if len(m) == 0 {
		return "00:00:00:00:00:00"
	}
	for k, v := range strings.ToUpper(hex.EncodeToString(m)) {
		s += string(v)
		if k%2 != 0 && k < len(m)*2-1 {
			s += ":"
		}
	}
	return
}

type WPAKey uint8

func (key WPAKey) String() string {
	if key == 1 {
		return "WPA"
	}
	return "WPA2"
}

type HccapxInstance struct {
	Signature   []byte      // the signature (file magic) of .hccapx files, it is always the string HCPX
	Version     Version     // the version number of the .hccapx file format
	MessagePair MessagePair // possible values range from 0 to 5 or 128 to 133

	ESSIDLength uint8  // the length of the network name (ESSID)
	ESSID       string // the network name (ESSID)

	KeyVersion WPAKey // set to 1 if WPA is used, other values (preferably 2) means WPA2
	HashValue  []byte // the actual hash value (MD5 for WPA, SHA1 for WPA2) truncated to 128 bit (16 bytes)

	StationMAC   MAC    // the mac address of the access point (BSSID)
	StationNonce []byte // nonce (random salt) generated by the access point
	ClientMAC    MAC    // the mac address of the client connecting to the access point
	ClientNonce  []byte // nonce (random salt) generated by the client connecting to the access point

	EAPOLLength uint16 // the length of the EAPOL
	EAPOL       []byte // the EAPOL (max 256 bytes)
}

type HccapxInstances []HccapxInstance

func (h HccapxInstances) WPANum() (c int) {
	for _, v := range h {
		if v.KeyVersion == 1 {
			c++
		}
	}
	return
}

func (h HccapxInstances) WPA2Num() (c int) {
	for _, v := range h {
		if v.KeyVersion != 1 {
			c++
		}
	}
	return
}

func (h HccapxInstances) UniqueAPs() int {
	aps := make(map[string]bool)
	for _, v := range h {
		aps[v.ESSID] = true
	}
	return len(aps)
}

type ReplayCounter bool

func (r ReplayCounter) String() string {
	if r {
		return "yes"
	}
	return "no"
}

type MessagePairStructure struct {
	EAPOLSource           uint8
	APMessage             uint8
	ClientMessage         uint8
	ReplayCounterMatching ReplayCounter
}

var MessagePairTable = map[MessagePair]MessagePairStructure{
	0:   {2, 1, 2, true},
	1:   {4, 1, 4, true},
	2:   {2, 3, 2, true},
	3:   {3, 3, 2, true},
	4:   {3, 3, 4, true},
	5:   {4, 3, 4, true},
	128: {2, 1, 2, false},
	129: {4, 1, 4, false},
	130: {2, 3, 2, false},
	131: {3, 3, 2, false},
	132: {3, 3, 4, false},
	133: {4, 3, 4, false},
}
